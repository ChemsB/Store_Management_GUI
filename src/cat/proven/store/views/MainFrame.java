/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cat.proven.store.views;

import cat.proven.store.model.Model;
import cat.proven.store.model.Product;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author chems
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form MainFrame
     */
    private final Model model = new Model();
    private Product product = new Product();
    
    public MainFrame() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        goFirst = new javax.swing.JButton();
        goPrevious = new javax.swing.JButton();
        goNext = new javax.swing.JButton();
        goLast = new javax.swing.JButton();
        goUpdate = new javax.swing.JButton();
        goDelete = new javax.swing.JButton();
        goInsert = new javax.swing.JButton();
        initCode1 = new javax.swing.JTextField();
        initDesc = new javax.swing.JTextField();
        initStock = new javax.swing.JTextField();
        initPrice = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Navegable Products");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Code: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Description: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Stock: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Price: ");

        goFirst.setText("<<");
        goFirst.addActionListener(this);
        goFirst.setActionCommand("goFirst");

        goPrevious.setText("<");
        goPrevious.addActionListener(this);
        goPrevious.setActionCommand("goPrevious");

        goNext.setText(">");
        goNext.addActionListener(this);
        goNext.setActionCommand("goNext");

        goLast.setText(">>");
        goLast.addActionListener(this);
        goLast.setActionCommand("goLast");

        goUpdate.setText("Update");
        goUpdate.addActionListener(this);
        goUpdate.setActionCommand("goUpdate");

        goDelete.setText("Delete");
        goDelete.addActionListener(this);
        goDelete.setActionCommand("goDelete");

        goInsert.setText("Insert");
        goInsert.addActionListener(this);
        goInsert.setActionCommand("goInsert");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(initPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(initStock, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(initDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(initCode1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(goFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(goNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goLast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goDelete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goInsert)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(initCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(initDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(initStock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(initPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goFirst)
                    .addComponent(goPrevious)
                    .addComponent(goNext)
                    .addComponent(goLast)
                    .addComponent(goUpdate)
                    .addComponent(goDelete)
                    .addComponent(goInsert))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goDelete;
    private javax.swing.JButton goFirst;
    private javax.swing.JButton goInsert;
    private javax.swing.JButton goLast;
    private javax.swing.JButton goNext;
    private javax.swing.JButton goPrevious;
    private javax.swing.JButton goUpdate;
    private javax.swing.JTextField initCode1;
    private javax.swing.JTextField initDesc;
    private javax.swing.JTextField initPrice;
    private javax.swing.JTextField initStock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent param) {
        
        switch (param.getActionCommand()) {
            case "goFirst":
                moveFirst();
                break;
            
            case "goPrevious":
                movePrevious();
                break;
            
            case "goNext":
                moveNext();
                break;
            case "goLast":
                moveLast();
                break;
            
            case "goUpdate":
                updateRow();
                break;
            
            case "goInsert":
                insertRow();
                break;
            
            case "goDelete":
                deleteRow();
                break;
            
        }
        
    }

    //Show first product
    private void moveFirst() {
        
        product = model.moveFirst();
        
        if (product != null) {
            printsProduct(product);
        } else {
            JOptionPane.showMessageDialog(this, "No more products");
        }
        
    }

    //Show previous product
    private void movePrevious() {
        
        product = model.movePrevious();
        if (product != null) {
            printsProduct(product);
        } else {
            JOptionPane.showMessageDialog(this, "No more products");
        }
        
    }

    //Show next product
    private void moveNext() {
        
        product = model.moveNext();
        if (product != null) {
            printsProduct(product);
        } else {
            JOptionPane.showMessageDialog(this, "No more products");
        }
        
    }

    //Show last product
    private void moveLast() {
        
        product = model.moveLast();
        
        if (product != null) {
            printsProduct(product);
        } else {
            JOptionPane.showMessageDialog(this, "No more products");
        }
        
    }

    //Update actual product
    private void updateRow() {
        
        boolean res = false;
        Product newProduct = new Product();
        
        try {
            if (product.getCode() != null) {
                newProduct = inputProduct();
                
                if (newProduct != null) {
                    
                    int input = JOptionPane.showConfirmDialog(null,
                            "Do you want change this product?", "Change", JOptionPane.YES_NO_CANCEL_OPTION);
                    
                    if (input == 0) {
                        if (product != null) {
                            res = model.modifyProduct(newProduct);
                        }
                    }
                    
                } else {
                    res = false;
                }
                
                if (res) {
                    JOptionPane.showMessageDialog(this, "Product changed");
                } else {
                    JOptionPane.showMessageDialog(this, "Product not changed");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "product not selected, please select one product");
            }
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "product not selected, please select one product");
        }
        
    }

    //Insert new product
    private void insertRow() {
        
        boolean res = false;
        Product newProduct = new Product();
        
        newProduct = inputProduct();
        
        if (newProduct != null) {
            
            int input = JOptionPane.showConfirmDialog(null,
                    "Do you want insert this product?", "Insert", JOptionPane.YES_NO_CANCEL_OPTION);
            
            if (input == 0) {
                res = model.addProduct(newProduct);
            } else {
                res = false;
            }
            
        } else {
            res = false;
        }
        
        if (res) {
            JOptionPane.showMessageDialog(this, "Product added");
            clearText();
            
        } else {
            JOptionPane.showMessageDialog(this, "Product not added");
        }
        
    }

    //Delete actual product
    private void deleteRow() {
        
        boolean res = false;
        
        try {
            
            if (product.getCode() != null) {
                
                int input = JOptionPane.showConfirmDialog(null,
                        "Do you want remove this product?", "Remove", JOptionPane.YES_NO_CANCEL_OPTION);
                
                if (input == 0) {
                    res = model.removeProduct();
                } else {
                    res = false;
                }
                
                if (res) {
                    JOptionPane.showMessageDialog(this, "Product removed");
                    clearText();
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Product not removed");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "product not selected, please select one product");
            }
            
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "product not selected, please select one product");
        }
        
    }

    /**
     * show product in textField
     *
     * @param p product to prints
     */
    private void printsProduct(Product p) {
        
        initCode1.setText(p.getCode());
        initDesc.setText(p.getDescritpion());
        initPrice.setText(String.valueOf(p.getPrice()));
        initStock.setText(String.valueOf(p.getStock()));
        
    }

    /**
     * User input product
     *
     * @return product with new data
     */
    private Product inputProduct() {
        
        Product p = new Product();
        try {
            
            String code = initCode1.getText();
            String desc = initDesc.getText();
            int stock = Integer.parseInt(initStock.getText());
            double price = Double.parseDouble(initPrice.getText());
            
            p = new Product(code, desc, price, stock);
            
        } catch (NumberFormatException nfe) {
            p = null;
            JOptionPane.showMessageDialog(this, "Invalid format");
        }
        
        return p;
    }

    /**
     * Clear textFields
     */
    private void clearText() {
        
        initCode1.setText("");
        initDesc.setText("");
        initPrice.setText("");
        initStock.setText("");
        
    }
    
}
